#include "Engine.h"
#include "../Hacks/Setup.h"

bool CGlobal::IsGuiVisible = false;
bool CGlobal::IsGameReady = false;
int CGlobal::iScreenWidth;
int CGlobal::iScreenHeight;
string CGlobal::SystemDisk = "C:\\";
WEAPON_TYPE CGlobal::GWeaponType = WEAPON_TYPE::WEAPON_TYPE_UNKNOWN;
WEAPON_ID CGlobal::GWeaponID = WEAPON_ID::WEAPON_AK47;
float CGlobal::GFovView = 90;
float CGlobal::GFovViewExt = 90;
bool CGlobal::FullUpdateCheck = false;
Vector CGlobal::GViewAngle;
vector<string> CGlobal::ConfigList;
CBaseEntity* CGlobal::LocalPlayer;
CUserCmd* CGlobal::UserCmd;

bool CGlobal::OrigRightHand;
float CGlobal::OrigViewModelX;
float CGlobal::OrigViewModelY;
float CGlobal::OrigViewModelZ;
float CGlobal::OrigAspectRatio;

void ReadConfigs(LPCTSTR lpszFileName)
{
	CGlobal::ConfigList.push_back(lpszFileName);
}

int CGlobal::WeaponItemIndex[34] =
{
	// ��������� - 0 - 9
	WEAPON_DEAGLE,WEAPON_ELITE,WEAPON_FIVESEVEN,
	WEAPON_GLOCK,WEAPON_HKP2000,WEAPON_P250,
	WEAPON_USP_SILENCER,WEAPON_CZ75A,WEAPON_REVOLVER,
	WEAPON_TEC9,
	// �������� - 10 - 30
	WEAPON_AK47,WEAPON_AUG,WEAPON_FAMAS,WEAPON_GALILAR,
	WEAPON_M249,WEAPON_M4A4,WEAPON_M4A1_SILENCER,WEAPON_MAC10,
	WEAPON_P90,WEAPON_UMP45,WEAPON_MP5,WEAPON_XM1014,WEAPON_BIZON,
	WEAPON_MAG7,WEAPON_NEGEV,WEAPON_SAWEDOFF,
	WEAPON_MP7,WEAPON_MP9,WEAPON_NOVA,WEAPON_SG553,
	WEAPON_SCAR20,WEAPON_G3SG1,
	// ���������  - 31 - 32
	WEAPON_AWP,WEAPON_SSG08
};

string CGlobal::WeaponNames[34] =
{
	M_WEAPON_DEAGLE_STR,M_WEAPON_ELITE_STR,M_WEAPON_FIVESEVEN_STR,
	M_WEAPON_GLOCK_STR,M_WEAPON_HKP2000_STR,M_WEAPON_P250_STR,
	M_WEAPON_USP_S_STR,M_WEAPON_CZ75A_STR,M_WEAPON_REVOLVER_STR,
	M_WEAPON_TEC9_STR,
	M_WEAPON_AK47_STR,M_WEAPON_AUG_STR,M_WEAPON_FAMAS_STR,M_WEAPON_GALILAR_STR,
	M_WEAPON_M249_STR,M_WEAPON_M4A4_STR,M_WEAPON_M4A1_S_STR,M_WEAPON_MAC10_STR,
	M_WEAPON_P90_STR,M_WEAPON_UMP45_STR,M_WEAPON_MP5_STR,M_WEAPON_XM1014_STR,M_WEAPON_BIZON_STR,
	M_WEAPON_MAG7_STR,M_WEAPON_NEGEV_STR,M_WEAPON_SAWEDOFF_STR,
	M_WEAPON_MP7_STR,M_WEAPON_MP9_STR,M_WEAPON_NOVA_STR,M_WEAPON_SG553_STR,
	M_WEAPON_SCAR20_STR,M_WEAPON_G3SG1_STR,
	M_WEAPON_AWP_STR,M_WEAPON_SSG08_STR,
};
int CGlobal::GetWeaponId()
{
	if (GP_EntPlayers && GP_EntPlayers->EntityLocal)
	{
		for (size_t i = 0; i < sizeof(WeaponItemIndex) / sizeof(*WeaponItemIndex); i++)
		{
			if (WeaponItemIndex[i] == GP_EntPlayers->EntityLocal->WeaponIdx)
				return i;
		}
	}
	return 0;
}

WEAPON_TYPE CGlobal::GetWeaponType(CBaseWeapon* pWeaponEntity)
{
	if (!pWeaponEntity)
		return WEAPON_TYPE_UNKNOWN;

	if (!*pWeaponEntity->GeteAttributableItem()->GetItemDefinitionIndex())
		return WEAPON_TYPE_UNKNOWN;

	int iItemDefinitionIndex = *pWeaponEntity->GeteAttributableItem()->GetItemDefinitionIndex();
	switch (iItemDefinitionIndex)
	{
	case WEAPON_DEAGLE:
		return WEAPON_TYPE_PISTOL;
	case WEAPON_ELITE:
		return WEAPON_TYPE_PISTOL;
	case WEAPON_FIVESEVEN:
		return WEAPON_TYPE_PISTOL;
	case WEAPON_GLOCK:
		return WEAPON_TYPE_PISTOL;
	case WEAPON_AK47:
		return WEAPON_TYPE_RIFLE;
	case WEAPON_AUG:
		return WEAPON_TYPE_RIFLE;
	case WEAPON_AWP:
		return WEAPON_TYPE_SNIPER;
	case WEAPON_FAMAS:
		return WEAPON_TYPE_RIFLE;
	case WEAPON_G3SG1:
		return WEAPON_TYPE_SNIPER;
	case WEAPON_GALILAR:
		return WEAPON_TYPE_RIFLE;
	case WEAPON_M249:
		return WEAPON_TYPE_RIFLE;
	case WEAPON_M4A4:
		return WEAPON_TYPE_RIFLE;
	case WEAPON_MAC10:
		return WEAPON_TYPE_RIFLE;
	case WEAPON_P90:
		return WEAPON_TYPE_RIFLE;
	case WEAPON_UMP45:
		return WEAPON_TYPE_RIFLE;
	case WEAPON_MP5:
		return WEAPON_TYPE_RIFLE;
	case WEAPON_XM1014:
		return WEAPON_TYPE_SHOTGUN;
	case WEAPON_BIZON:
		return WEAPON_TYPE_RIFLE;
	case WEAPON_MAG7:
		return WEAPON_TYPE_SHOTGUN;
	case WEAPON_NEGEV:
		return WEAPON_TYPE_RIFLE;
	case WEAPON_SAWEDOFF:
		return WEAPON_TYPE_SHOTGUN;
	case WEAPON_TEC9:
		return WEAPON_TYPE_PISTOL;
	case WEAPON_TASER:
		return WEAPON_TYPE_PISTOL;
	case WEAPON_HKP2000:
		return WEAPON_TYPE_PISTOL;
	case WEAPON_MP7:
		return WEAPON_TYPE_RIFLE;
	case WEAPON_MP9:
		return WEAPON_TYPE_RIFLE;
	case WEAPON_NOVA:
		return WEAPON_TYPE_SHOTGUN;
	case WEAPON_P250:
		return WEAPON_TYPE_PISTOL;
	case WEAPON_SCAR20:
		return WEAPON_TYPE_SNIPER;
	case WEAPON_SG553:
		return WEAPON_TYPE_RIFLE;
	case WEAPON_SSG08:
		return WEAPON_TYPE_SNIPER;
	case WEAPON_KNIFE:
		return WEAPON_TYPE_KNIFE;
	case WEAPON_FLASHBANG:
		return WEAPON_TYPE_GRENADE;
	case WEAPON_HEGRENADE:
		return WEAPON_TYPE_GRENADE;
	case WEAPON_SMOKEGRENADE:
		return WEAPON_TYPE_GRENADE;
	case WEAPON_MOLOTOV:
		return WEAPON_TYPE_GRENADE;
	case WEAPON_DECOY:
		return WEAPON_TYPE_GRENADE;
	case WEAPON_INCGRENADE:
		return WEAPON_TYPE_GRENADE;
	case WEAPON_C4:
		return WEAPON_TYPE_C4;
	case WEAPON_KNIFE_T:
		return WEAPON_TYPE_KNIFE;
	case WEAPON_M4A1_SILENCER:
		return WEAPON_TYPE_RIFLE;
	case WEAPON_USP_SILENCER:
		return WEAPON_TYPE_PISTOL;
	case WEAPON_CZ75A:
		return WEAPON_TYPE_PISTOL;
	case WEAPON_REVOLVER:
		return WEAPON_TYPE_PISTOL;
	case WEAPON_KNIFE_CSS:
		return WEAPON_TYPE_KNIFE;
	case WEAPON_KNIFE_BAYONET:
		return WEAPON_TYPE_KNIFE;
	case WEAPON_KNIFE_FLIP:
		return WEAPON_TYPE_KNIFE;
	case WEAPON_KNIFE_GUT:
		return WEAPON_TYPE_KNIFE;
	case WEAPON_KNIFE_KARAMBIT:
		return WEAPON_TYPE_KNIFE;
	case WEAPON_KNIFE_M9_BAYONET:
		return WEAPON_TYPE_KNIFE;
	case WEAPON_KNIFE_TACTICAL:
		return WEAPON_TYPE_KNIFE;
	case WEAPON_KNIFE_FALCHION:
		return WEAPON_TYPE_KNIFE;
	case WEAPON_KNIFE_SURVIVAL_BOWIE:
		return WEAPON_TYPE_KNIFE;
	case WEAPON_KNIFE_BUTTERFLY:
		return WEAPON_TYPE_KNIFE;
	case WEAPON_KNIFE_PUSH:
		return WEAPON_TYPE_KNIFE;
	case WEAPON_KNIFE_CORD:
		return WEAPON_TYPE_KNIFE;
	case WEAPON_KNIFE_CANIS:
		return WEAPON_TYPE_KNIFE;
	case WEAPON_KNIFE_URSUS:
		return WEAPON_TYPE_KNIFE;
	case WEAPON_KNIFE_GYPSY_JACKKNIFE:
		return WEAPON_TYPE_KNIFE;
	case WEAPON_KNIFE_OUTDOOR:
		return WEAPON_TYPE_KNIFE;
	case WEAPON_KNIFE_STILETTO:
		return WEAPON_TYPE_KNIFE;
	case WEAPON_KNIFE_WIDOWMAKER:
		return WEAPON_TYPE_KNIFE;
	case WEAPON_KNIFE_SKELETON:
		return WEAPON_TYPE_KNIFE;
	default:
		return WEAPON_TYPE_UNKNOWN;
	}
}





























































